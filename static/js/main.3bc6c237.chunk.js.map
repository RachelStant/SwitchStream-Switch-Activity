{"version":3,"sources":["pages/quickActivity/QuickActivityLogic.js","Components/Stopwatch.js","Components/ExcelExport.js","pages/quickActivity/QuickActivity.js","images/Switch Stream PNG uncropped.png","pages/home/Directions.js","Components/navbar.js","App.js","index.js"],"names":["QuickActivityLogic","resultsRef","React","createRef","useState","attemptsArray","setAttemptsArray","resultsArray","setResultsArray","switchAmount","setSwitchAmount","attemptAmount","setAttemptAmount","endActivity","setEndActivity","showTimer","setShowTimer","activityComment","setActivityComment","exportData","setExportData","promptEngage","setPromptEngage","resultsLoaded","setResultsLoaded","isActive","setIsActive","isPaused","setIsPaused","time","setTime","useEffect","console","log","node","current","scrollIntoView","behavior","TotalAttemptCorrect","length","name","value","score","Switch1Accuracy","Switch1NoAttempt","Switch2Accuracy","Switch2NoAttempt","Switch3Accuracy","Switch3NoAttempt","Switch4Accuracy","incrementSwitches","decrementSwitches","incrementAttempt","decrementAttempt","addAttempts","switch1Answers","switch2Answers","switch3Answers","switch4Answers","tempArray","i","newAttempt","id","Math","floor","random","switch1Answer","prompting","engagement","switch2Answer","switch3Answer","switch4Answer","push","computeSW1Answer","event","index","newArray","map","attempt","computeSW2Answer","computeSW3Answer","computeSW4Answer","CalculateActivityScore","Switch1CorrectLength","filter","answer","Switch1TotalLength","Switch1NoAttemptLength","round","Switch2CorrectLength","Switch2TotalLength","Switch2NoAttemptLength","Switch3CorrectLength","Switch3TotalLength","Switch3NoAttemptLength","Switch4CorrectLength","Switch4TotalLength","Switch4NoAttemptLength","computePrompting","target","computeEngagement","ComputePrompt","promptArray","TotalLength","Noprompt","prompt","Visprompt","Verprompt","Phyprompt","x","y","ComputeEngage","engageArray","TotalLengthEngage","Engaged","engage","SomewhatEngage","NotEngage","handleCommentChange","PromptEngage","promptEngageArray","handleScroll","Timer","className","slice","ControlButtons","handleStart","handleReset","handlePauseResume","StartButton","onClick","ActiveButtons","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ExcelExport","element","data","label","QuickActivity","interval","setInterval","clearInterval","handleEndActivity","render","Stopwatch","attempts","InputActivity","type","GenerateActivity","AttemptCard","header","indexOf","activeButtonSW1","setActiveButtonSW1","activeButtonSW2","setActiveButtonSW2","activeButtonSW3","setActiveButtonSW3","activeButtonSW4","setActiveButtonSW4","style","fontFamily","class","onChange","selected","EndActivity","showResults","setShowResults","ref","result","Switch4NoAttempt","for","placeholder","color","href","PromptPie","innerRadius","labels","datum","labelRadius","fontSize","fill","colorScale","fontWeight","EngagePie","Directions","src","logo","width","height","alt","Navbar","basename","to","exact","path","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc6c237.chunk.js","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react';\n\n\n\n\n\nconst QuickActivityLogic = () => {\n\nconst resultsRef = React.createRef(null)\n\nconst [attemptsArray, setAttemptsArray] = useState([]);\nconst [resultsArray, setResultsArray] = useState([])\nconst [switchAmount, setSwitchAmount] = useState(1)\nconst [attemptAmount, setAttemptAmount] = useState(1)\nconst [endActivity, setEndActivity] = useState(false)\nconst [showTimer, setShowTimer] = useState(false)\nconst [activityComment, setActivityComment] = useState(\"\")\nconst [exportData, setExportData] = useState([]);\nconst [promptEngage, setPromptEngage] = useState([]);\nconst [resultsLoaded, setResultsLoaded] = useState(false)\n\n// Stopwatch State\n\nconst [isActive, setIsActive] = useState(false);\nconst [isPaused, setIsPaused] = useState(true);\nconst [time, setTime] = useState(0);\n// const [timeExport, setTimeExport] = useState(false);\n// const [timeExcel, setTimeExcel] = useState(\"\")\n// let isFirstRender = useRef(true);\n\n\n\n// Handle Activity Scroll\nconst handleScroll = () => {\n        setResultsLoaded(true)\n      \n    }\n\nuseEffect(() => {\n\n    console.log('scroll useEffect ran')\n    const node = resultsRef.current\n\n    if(resultsLoaded) {\n\n        node.scrollIntoView({behavior: 'smooth'});\n        \n    }\n\n}, [resultsLoaded])\n\n\n\n\n\n    //Set Switch Amount\n    const incrementSwitches = () => {\n        if (switchAmount < 4) {\n        setSwitchAmount(switchAmount + 1);\n        }  \n       \n    };\n\n    const decrementSwitches = () => {\n\n        if(switchAmount > 1) {\n        setSwitchAmount(switchAmount - 1)\n        }\n    };\n\n    //Set Attempt Amount\n    const incrementAttempt = () => {\n        if (attemptAmount < 20) {\n            setAttemptAmount(attemptAmount + 1);\n        }\n    };\n\n    const decrementAttempt = () => {\n        if (attemptAmount > 1) {\n            setAttemptAmount(attemptAmount - 1)\n        }\n    };\n\n    // Activity Comments\n    const handleCommentChange = (event) => {\n        setActivityComment(event.target.value)\n\n    }\n\n  \n\n    \n    // Generate Activity on Button Press\n    const addAttempts = () => {\n        \n        const switch1Answers = [\"Correct\", \"Incorrect\", \"No attempt\"]\n        const switch2Answers = [\"Correct\", \"Incorrect\", \"No attempt\"]\n        const switch3Answers = [\"Correct\", \"Incorrect\", \"No attempt\"]\n        const switch4Answers = [\"Correct\", \"Incorrect\", \"No attempt\"]\n        \n    \n    \n       \n        const tempArray = []\n        for(let i = 1; i <= attemptAmount; i++) {\n\n            let id = Math.floor(Math.random() * 10000) + 1\n            let newAttempt = {id}\n            //determine how many switches per attempt\n            if (switchAmount === 1) {\n                newAttempt.switch1Answers = switch1Answers\n                newAttempt.switch1Answer = null\n                newAttempt.prompting = null\n                newAttempt.engagement = null\n            } else if (switchAmount === 2) {\n                newAttempt.switch1Answers = switch1Answers\n                newAttempt.switch1Answer = null\n                newAttempt.switch2Answers = switch2Answers\n                newAttempt.switch2Answer = null\n                newAttempt.prompting = null\n                newAttempt.engagement = null\n            } else if (switchAmount === 3) {\n                newAttempt.switch1Answers = switch1Answers\n                newAttempt.switch1Answer = null\n                newAttempt.switch2Answers = switch2Answers\n                newAttempt.switch2Answer = null\n                newAttempt.switch3Answers = switch3Answers\n                newAttempt.switch3Answer = null\n                newAttempt.prompting = null\n                newAttempt.engagement = null\n            } else {\n                newAttempt.switch1Answers = switch1Answers\n                newAttempt.switch1Answer = null\n                newAttempt.switch2Answers = switch2Answers\n                newAttempt.switch2Answer = null\n                newAttempt.switch3Answers = switch3Answers\n                newAttempt.switch3Answer = null\n                newAttempt.switch4Answers = switch4Answers\n                newAttempt.switch4Answer = null\n                newAttempt.prompting = null\n                newAttempt.engagement = null\n\n            }\n            \n\n            \n            tempArray.push(newAttempt)\n         \n        }\n\n            console.log(tempArray)\n\n        setAttemptsArray(tempArray);\n        setEndActivity(true);\n        setShowTimer(true);\n\n        console.log(attemptsArray)\n    }\n\n\n    ///Compute Each Switches Answer\n    const computeSW1Answer = (event, index, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    switch1Answer: attempt.switch1Answers[index]\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray)\n    \n    }\n\n    const computeSW2Answer = (event, index, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    switch2Answer: attempt.switch2Answers[index]\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray)\n        console.log(attemptsArray)\n    \n    }\n\n    const computeSW3Answer = (event, index, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    switch3Answer: attempt.switch3Answers[index]\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray)\n    \n    }\n\n    const computeSW4Answer = (event, index, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    switch4Answer: attempt.switch4Answers[index]\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray)\n    \n    }\n\n\n    // Compute Prompting level\n    \n    const computePrompting = (event, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    prompting: event.target.value\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray);\n        console.log(attemptsArray)\n      \n    }\n\n\n    // Compute Engagement level\n\n    const computeEngagement = (event, id) => {\n        let newArray = attemptsArray.map((attempt) => {\n            if (attempt.id === id) {\n                return {\n                    ...attempt,\n                    engagement: event.target.value\n                }\n            }\n            return attempt;\n        })\n\n        setAttemptsArray(newArray);\n       \n    }\n\n\n\n\n    // End Activity Result\n\n    let TotalAttemptCorrect = 0\n  \n\n    const CalculateActivityScore = () => {\n        \n        // 1 Switch Activity\n        if (switchAmount === 1) {\n            attemptsArray.map((attempt) => {\n                if (attempt.switch1Answer === 'Correct') {\n                    TotalAttemptCorrect++\n                }   \n                 \n            })\n\n            const Switch1CorrectLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'Correct').length\n            const Switch1TotalLength = attemptsArray.map((attempt) => attempt.switch1Answer).length\n            \n            const Switch1NoAttemptLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'No attempt').length\n            \n\n            setResultsArray([{'score': (Math.round((TotalAttemptCorrect / attemptsArray.length) * 100) / 100) * 100, 'Switch1Accuracy': (Math.round((Switch1CorrectLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch1NoAttempt': (Math.round((Switch1NoAttemptLength / Switch1TotalLength) * 100) / 100) * 100}])\n            // setExportData([{'score': (Math.round((TotalAttemptCorrect / attemptsArray.length) * 100) / 100) * 100, 'Switch1Accuracy': (Math.round((Switch1CorrectLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch1NoAttempt': (Math.round((Switch1NoAttemptLength / Switch1TotalLength) * 100) / 100) * 100}])\n        }\n\n        // 2 Switch Activity\n        if (switchAmount === 2) {\n            attemptsArray.map((attempt) => {\n                if (attempt.switch1Answer === 'Correct' && attempt.switch2Answer === 'Correct') {\n                    TotalAttemptCorrect++\n                }\n               \n            })\n\n            const Switch1CorrectLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'Correct').length\n            const Switch1TotalLength = attemptsArray.map((attempt) => attempt.switch1Answer).length\n            const Switch2CorrectLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'Correct').length\n            const Switch2TotalLength = attemptsArray.map((attempt) => attempt.switch2Answer).length\n            \n            const Switch1NoAttemptLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'No attempt').length\n            const Switch2NoAttemptLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'No attempt').length\n            \n            setResultsArray([{'score': (Math.round((TotalAttemptCorrect / attemptsArray.length) * 100) / 100) * 100, 'Switch1Accuracy': (Math.round((Switch1CorrectLength / Switch1TotalLength) * 100) / 100) * 100 , 'Switch2Accuracy': (Math.round((Switch2CorrectLength / Switch2TotalLength) *100) / 100) * 100, 'Switch1NoAttempt': (Math.round((Switch1NoAttemptLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch2NoAttempt': (Math.round((Switch2NoAttemptLength / Switch2TotalLength) * 100) / 100) * 100}])  \n            \n        }\n\n        // 3 Switch Activity\n        if (switchAmount === 3) {\n            attemptsArray.map((attempt) => {\n                if (attempt.switch1Answer === 'Correct' && attempt.switch2Answer === 'Correct' && attempt.switch3Answer === 'Correct') {\n                    TotalAttemptCorrect++\n                }   \n            })\n\n            const Switch1CorrectLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'Correct').length\n            const Switch1TotalLength = attemptsArray.map((attempt) => attempt.switch1Answer).length\n            const Switch2CorrectLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'Correct').length\n            const Switch2TotalLength = attemptsArray.map((attempt) => attempt.switch2Answer).length\n            const Switch3CorrectLength = attemptsArray.map((attempt) => attempt.switch3Answer).filter((answer) => answer === 'Correct').length\n            const Switch3TotalLength = attemptsArray.map((attempt) => attempt.switch3Answer).length\n\n            const Switch1NoAttemptLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'No attempt').length\n            const Switch2NoAttemptLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'No attempt').length\n            const Switch3NoAttemptLength = attemptsArray.map((attempt) => attempt.switch3Answer).filter((answer) => answer === 'No attempt').length\n\n            setResultsArray([{'score': (Math.round((TotalAttemptCorrect / attemptsArray.length) * 100) / 100) * 100, 'Switch1Accuracy': (Math.round((Switch1CorrectLength / Switch1TotalLength) * 100) / 100) * 100 , 'Switch2Accuracy': (Math.round((Switch2CorrectLength / Switch2TotalLength) *100) / 100) * 100, 'Switch3Accuracy': (Math.round((Switch3CorrectLength / Switch3TotalLength) *100) / 100) * 100, 'Switch1NoAttempt': (Math.round((Switch1NoAttemptLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch2NoAttempt': (Math.round((Switch2NoAttemptLength / Switch2TotalLength) * 100) / 100) * 100, 'Switch3NoAttempt': (Math.round((Switch3NoAttemptLength / Switch3TotalLength) * 100) / 100) * 100}])\n\n        }\n\n        // 4 Switch Activity\n         if (switchAmount === 4) {\n            attemptsArray.map((attempt) => {\n                if (attempt.switch1Answer === 'Correct' && attempt.switch2Answer === 'Correct' && attempt.switch3Answer === 'Correct' && attempt.switch4Answer === 'Correct') {\n                        TotalAttemptCorrect++\n                }\n             })\n\n             const Switch1CorrectLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'Correct').length\n             const Switch1TotalLength = attemptsArray.map((attempt) => attempt.switch1Answer).length\n             const Switch2CorrectLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'Correct').length\n             const Switch2TotalLength = attemptsArray.map((attempt) => attempt.switch2Answer).length\n             const Switch3CorrectLength = attemptsArray.map((attempt) => attempt.switch3Answer).filter((answer) => answer === 'Correct').length\n             const Switch3TotalLength = attemptsArray.map((attempt) => attempt.switch3Answer).length\n             const Switch4CorrectLength = attemptsArray.map((attempt) => attempt.switch4Answer).filter((answer) => answer === 'Correct').length\n             const Switch4TotalLength = attemptsArray.map((attempt) => attempt.switch4Answer).length\n\n             const Switch1NoAttemptLength = attemptsArray.map((attempt) => attempt.switch1Answer).filter((answer) => answer === 'No attempt').length\n             const Switch2NoAttemptLength = attemptsArray.map((attempt) => attempt.switch2Answer).filter((answer) => answer === 'No attempt').length\n             const Switch3NoAttemptLength = attemptsArray.map((attempt) => attempt.switch3Answer).filter((answer) => answer === 'No attempt').length\n             const Switch4NoAttemptLength = attemptsArray.map((attempt) => attempt.switch4Answer).filter((answer) => answer === 'No attempt').length\n             \n             setResultsArray([{'score': (Math.round((TotalAttemptCorrect / attemptsArray.length) * 100) / 100) * 100, 'Switch1Accuracy': (Math.round((Switch1CorrectLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch2Accuracy': (Math.round((Switch2CorrectLength / Switch2TotalLength) *100) / 100) * 100, 'Switch3Accuracy': (Math.round((Switch3CorrectLength / Switch3TotalLength) *100) / 100) * 100, 'Switch4Accuracy': (Math.round((Switch4CorrectLength / Switch4TotalLength) *100) / 100) * 100, 'Switch1NoAttempt': (Math.round((Switch1NoAttemptLength / Switch1TotalLength) * 100) / 100) * 100, 'Switch2NoAttempt': (Math.round((Switch2NoAttemptLength / Switch2TotalLength) * 100) / 100) * 100, 'Switch3NoAttempt': (Math.round((Switch3NoAttemptLength / Switch3TotalLength) * 100) / 100) * 100, 'Switch4NoAttempt': (Math.round((Switch4NoAttemptLength / Switch4TotalLength) * 100) / 100) * 100}])\n        }\n\n            console.log(resultsArray);\n            \n    } \n\n\n    //Calculate Prompting\n\n   const ComputePrompt = () => {\n\n        let promptArray = []\n    \n        const TotalLength = attemptsArray.map((attempt) => attempt.prompting).length\n        const Noprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'No prompt').length\n        const Visprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Visual prompt').length\n        const Verprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Verbal prompt').length\n        const Phyprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Physical prompt').length\n\n\n        if (Visprompt > 0) { promptArray.push({ x: 'Visual \\n prompt', y: (Math.round((Visprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Noprompt > 0) { promptArray.push({ x: 'No prompt', y: (Math.round((Noprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Verprompt > 0) { promptArray.push({ x: 'Verbal \\n prompt', y: (Math.round((Verprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Phyprompt > 0) { promptArray.push({ x: 'Physical \\n Prompt', y: (Math.round((Phyprompt / TotalLength) * 100) / 100) * 100 }) }\n        \n        //setPromptArray([{x: 'No prompt', y: (Math.round((Noprompt / TotalLength) * 100) / 100) * 100}, {x: 'Visual prompt',  y: (Math.round((Visprompt / TotalLength) * 100) / 100) * 100}, {x: 'Verbal prompt', y: (Math.round((Verprompt / TotalLength) * 100) / 100) * 100}, {x: 'Physical prompt', y: (Math.round((Phyprompt / TotalLength) * 100) / 100) * 100} ])\n        //setEngageArray([{'Engaged': (Math.round((Engaged / TotalLengthEngage) * 100) / 100) * 100, 'SomewhatEngage': (Math.round((SomewhatEngage / TotalLengthEngage) * 100) / 100) * 100, 'NotEngage': (Math.round((NotEngage / TotalLengthEngage) * 100) / 100) * 100 }])\n        \n        return promptArray;\n        \n    }\n\n    //Calculate Engagement\n\n    function ComputeEngage() {\n        let engageArray = [];\n\n        const TotalLengthEngage = attemptsArray.map((attempt) => attempt.engagement).length\n        const Engaged = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Engaged').length\n        const SomewhatEngage = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Somewhat engaged').length\n        const NotEngage = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Not engaged').length\n\n        if (Engaged > 0) { engageArray.push({x: 'Engaged', y: (Math.round((Engaged / TotalLengthEngage) * 100) / 100) * 100}) }\n        if (SomewhatEngage > 0) { engageArray.push({ x: 'Somewhat\\n engaged', y: (Math.round((SomewhatEngage / TotalLengthEngage) * 100) / 100) * 100}) } \n        if (NotEngage > 0) { engageArray.push({ x: 'Not\\n engaged', y: (Math.round((NotEngage / TotalLengthEngage) * 100) / 100) * 100}) }\n\n        return engageArray;\n\n    }\n\n    // Prompting and Engagement for Excel Export\n\n    const PromptEngage = () => {\n\n        let promptEngageArray = []\n\n        promptEngageArray.push({name: \"Total Attempts\", value: attemptsArray.length })\n    \n        // Prompting\n        const TotalLength = attemptsArray.map((attempt) => attempt.prompting).length\n        const Noprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'No prompt').length\n        const Visprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Visual prompt').length\n        const Verprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Verbal prompt').length\n        const Phyprompt = attemptsArray.map((attempt) => attempt.prompting).filter((prompt) => prompt === 'Physical prompt').length\n        if (Visprompt > 0) { promptEngageArray.push({ name: 'Visual prompt', value: (Math.round((Visprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Noprompt > 0) { promptEngageArray.push({ name: 'No prompt', value: (Math.round((Noprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Verprompt > 0) { promptEngageArray.push({ name: 'Verbal prompt', value: (Math.round((Verprompt / TotalLength) * 100) / 100) * 100 }) }\n        if (Phyprompt > 0) { promptEngageArray.push({ name: 'Physical prompt', value: (Math.round((Phyprompt / TotalLength) * 100) / 100) * 100 }) }\n        // Engagement\n        const TotalLengthEngage = attemptsArray.map((attempt) => attempt.engagement).length\n        const Engaged = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Engaged').length\n        const SomewhatEngage = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Somewhat engaged').length\n        const NotEngage = attemptsArray.map((attempt) => attempt.engagement).filter((engage) => engage === 'Not engaged').length\n        if (Engaged > 0) { promptEngageArray.push({name: 'Engaged', value: (Math.round((Engaged / TotalLengthEngage) * 100) / 100) * 100}) }\n        if (SomewhatEngage > 0) { promptEngageArray.push({name: 'Somewhat engaged', value: (Math.round((SomewhatEngage / TotalLengthEngage) * 100) / 100) * 100}) } \n        if (NotEngage > 0) { promptEngageArray.push({name: 'Not engaged', value: (Math.round((NotEngage / TotalLengthEngage) * 100) / 100) * 100}) }\n\n        \n        setPromptEngage([...promptEngageArray])\n       \n    }\n\n       \n    // Set Excel Export data Array \n        useEffect(() => {\n            \n            if (resultsArray.length > 0) {\n            setExportData([{name: \"Total Score\", value: resultsArray[0].score}, {name: \"Switch 1 Accuracy\", value: resultsArray[0].Switch1Accuracy}, {name: \"Switch 1 No Attempt Rate\", value: resultsArray[0].Switch1NoAttempt }, {name: \"Switch 2 Accuracy\", value: typeof resultsArray[0][\"Switch2Accuracy\"] !== 'undefined' ? (resultsArray[0].Switch2Accuracy) : (\"-\")}, {name: \"Switch 2 No Attempt Rate\", value: typeof resultsArray[0][\"Switch2NoAttempt\"] !== 'undefined' ? (resultsArray[0].Switch2NoAttempt) : (\"-\")}, {name: \"Switch 3 Accuracy\", value: typeof resultsArray[0][\"Switch3Accuracy\"] !== 'undefined' ? (resultsArray[0].Switch3Accuracy) : (\"-\")}, {name: \"Switch 3 No Attempt Rate\", value: typeof resultsArray[0][\"Switch3NoAttempt\"] !== 'undefined' ? (resultsArray[0].Switch3NoAttempt) : (\"-\")}, {name: \"Switch 4 Accuracy\", value: typeof resultsArray[0][\"Switch4Accuracy\"] !== 'undefined' ? (resultsArray[0].Switch4Accuracy) : (\"-\")}, ...promptEngage, {name: \"Activity Comments\", value: activityComment}, {name: \"Activity Time\", value: \"*ADD MANUALLY\"} ]) \n            \n           }\n          \n        }, [resultsArray, activityComment])\n\n      \n        \n\n    return {incrementSwitches, switchAmount, decrementSwitches, incrementAttempt, decrementAttempt, attemptAmount, addAttempts, attemptsArray, computeSW1Answer, computeSW2Answer, computeSW3Answer, computeSW4Answer, endActivity, CalculateActivityScore, resultsArray, showTimer, computePrompting, computeEngagement, ComputePrompt, ComputeEngage, handleCommentChange, exportData, PromptEngage, time, setTime, isPaused, setIsPaused, isActive, setIsActive, resultsRef, handleScroll  }\n}\n\n export default QuickActivityLogic\n","import React, { useState }from 'react'\nimport QuickActivityLogic from '../pages/quickActivity/QuickActivityLogic';\n\nexport const Stopwatch = () => {\n\n    // const [isActive, setIsActive] = useState(false);\n    // const [isPaused, setIsPaused] = useState(true);\n    // const [time, setTime] = useState(0);\n\n    const { time, setTime, isPaused, setIsPaused, isActive, setIsActive } = QuickActivityLogic();\n\n    React.useEffect(() => {\n        let interval = null;\n\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n\n        return () => {\n            clearInterval(interval);\n        };\n\n    }, [isActive, isPaused]);\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsPaused(false)\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused);\n    };\n\n    const handleEndActivity = () => {\n        setIsPaused(true)\n        // setTimeExport(true)\n        // console.log(time)\n    }\n\n    \n\n    const handleReset = () => {\n        setIsActive(false);\n        setTime(0);\n    }\n\n\n\n    return {\n        handleEndActivity,\n        time,\n        render: (\n        <div className='stop-watch'>\n            <Timer time={time} />\n            <ControlButtons handleStart={handleStart} handleReset={handleReset} handlePauseResume={handlePauseResume} isPaused={isPaused} isActive={isActive} />\n            \n        </div>\n    )}\n}\n\n\n\nexport const Timer = ({ time }) => {\n\n\n    return (\n        <div className='timer'>\n            <span className='timer__digits'>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n            <span className='timer__digits'>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n\n        </div>\n\n\n    );\n}\n\n\nconst ControlButtons = ({ handleStart, handleReset, handlePauseResume, isPaused, isActive}) => {\n\n    const StartButton = (\n        <button className='btn-timer btn-start' onClick={handleStart}>\n            start time\n        </button>\n    );\n\n    const ActiveButtons = (\n        <div className='btn-grp'>\n            <button className='btn-timer btn-two' onClick={handleReset}>\n                Reset\n            </button>\n            <button className='btn-timer btn-one' onClick={handlePauseResume}>\n                {isPaused ? \"Resume\" : \"Pause\"}\n            </button>\n        </div>\n    );\n\n    return(\n        <div className='Control-Buttons'>\n            <div>{isActive ? ActiveButtons : StartButton}</div>\n        </div>\n    );\n}\n","import React from 'react'\nimport ReactExport from \"react-export-excel\";\nimport QuickActivityLogic from '../pages/quickActivity/QuickActivityLogic';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\n\n\n\n\nconst ExcelExport = ({ exportData }) => {\n\n  \n\n     return (\n\n        \n        <ExcelFile element={<button className='btn btn-primary'>Download results to Excel</button>}>\n        <ExcelSheet data={exportData} name=\"Name and Date\">\n            <ExcelColumn label=\"Metric Name\" value=\"name\"/>\n            <ExcelColumn label=\"Value\" value=\"value\"/>\n         \n        </ExcelSheet>\n        </ExcelFile>\n\n      \n    )\n}\n\n\nexport default ExcelExport\n","import React, { useState } from 'react'\nimport QuickActivityLogic from './QuickActivityLogic';\nimport {Stopwatch, Timer} from '../../Components/Stopwatch';\nimport { VictoryPie } from 'victory';\nimport ExcelExport from '../../Components/ExcelExport';\n\n\n\n\n\n\n\n//Parent component\nconst QuickActivity = () => {\n    //pass the props from logic and destructure them in parent (page) component\n    //pass props to children components\n    const { incrementSwitches, decrementSwitches, switchAmount, incrementAttempt, decrementAttempt, attemptAmount, addAttempts, attemptsArray, computeSW1Answer, computeSW2Answer, computeSW3Answer, computeSW4Answer, endActivity, CalculateActivityScore, resultsArray, showTimer, computePrompting, computeEngagement, ComputePrompt, ComputeEngage, handleCommentChange, exportData, PromptEngage, resultsRef, handleScroll } = QuickActivityLogic()\n    const { render, handleEndActivity, time} = Stopwatch();\n    \n    return (\n        <div>\n            \n            <InputActivity {...{incrementSwitches, decrementSwitches, switchAmount, incrementAttempt, decrementAttempt, attemptAmount, addAttempts }} />\n            <GenerateActivity attempts={attemptsArray} computeSW1Answer={computeSW1Answer} computeSW2Answer={computeSW2Answer} computeSW3Answer={computeSW3Answer} computeSW4Answer={computeSW4Answer} showTimer={showTimer} computePrompting={computePrompting} computeEngagement={computeEngagement} render={render} />\n            {endActivity ? <EndActivity CalculateActivityScore={CalculateActivityScore} resultsArray={resultsArray} ComputePrompt={ComputePrompt} ComputeEngage={ComputeEngage} handleEndActivity={handleEndActivity} time={time} handleCommentChange={handleCommentChange} exportData={exportData} PromptEngage={PromptEngage} resultsRef={resultsRef} handleScroll={handleScroll} /> : null}\n        </div>\n      \n    )\n    \n}\n\nexport default QuickActivity;\n\n\n//accept the props in child component\nconst InputActivity = ({incrementSwitches, switchAmount, decrementSwitches, incrementAttempt, decrementAttempt, attemptAmount, addAttempts }) => {\n\n  \n\n    return (\n        <section className='user-form'>\n        <div className='container'>\n            <div className='row mb-3'>\n                    <div className='col-sm d-flex add-switches'>\n                        <h5>Number of switches</h5>\n                        <div className='add-minus-switch'>\n                        <button type='button' className='add-minus' onClick={decrementSwitches}><i className='fas fa-minus'></i></button>\n                        <input type='text' name='switchAmount' value={switchAmount} /> \n                        <button type='button' className='add-minus' onClick={incrementSwitches}><i className='fas fa-plus'></i></button>\n                         </div>\n                    </div>\n\n                    <div className='col-sm d-flex add-attempts'>\n                        <h5>Number of attempts</h5>\n                        <div className='add-minus-attempt'>\n                        <button type='button' className='add-minus' onClick={decrementAttempt}> <i className='fas fa-minus'></i></button>\n                        <input type='text' name='attemptAmount' value={attemptAmount} />\n                        <button type='button' className='add-minus' onClick={incrementAttempt}><i className='fas fa-plus'></i></button>\n                        </div>\n\n                    </div>\n                    \n            </div>\n            <div className='row'>\n                    <div className='col d-flex justify-content-center'>\n                        <button className='generate-button' type='button' onClick={addAttempts}>Create activity</button>\n                    </div>\n\n            </div>\n\n            \n        </div>\n        </section>\n\n      )\n\n}\n\n//accept the props in child component\nconst GenerateActivity = ({attempts, computeSW1Answer, computeSW2Answer, computeSW3Answer, computeSW4Answer, showTimer, computePrompting, computeEngagement, render }) => {\n\n   // const { attemptsArray, addAttempts } = QuickActivityLogic();\n\n    return (\n        <section className='generated-activity'>\n            <div className='container'>\n               {showTimer ? <div className='row'>\n                    <div className='col d-flex justify-content-center'>\n                     { render }\n                    </div>\n                </div> : null }\n                <div className='row'>\n                <div className='col d-flex attempt-cols justify-content-center'>\n                        {attempts.map((attempt) => (\n                            <AttemptCard key={attempt.id} attempt={attempt} attempts={attempts} computeSW1Answer={computeSW1Answer} computeSW2Answer={computeSW2Answer} computeSW3Answer={computeSW3Answer} computeSW4Answer={computeSW4Answer} computePrompting={computePrompting} computeEngagement={computeEngagement} />\n                            ))}\n                    </div>\n                </div>\n            </div>\n\n        </section>\n\n    )\n        \n  \n}\n\n\n\n\nconst AttemptCard = ({attempt, attempts, computeSW1Answer, computeSW2Answer, computeSW3Answer, computeSW4Answer, computePrompting, computeEngagement }) => {\n\n    const header = attempts.indexOf(attempt) + 1\n    const [activeButtonSW1, setActiveButtonSW1] = useState()\n    const [activeButtonSW2, setActiveButtonSW2] = useState()\n    const [activeButtonSW3, setActiveButtonSW3] = useState()\n    const [activeButtonSW4, setActiveButtonSW4] = useState()\n\n\n    return (\n        \n            <div className='container'>\n                <div className='row'>\n                    <div className='col d-flex justify-content-center'>\n                    <div className=\"card border-primary w-75  text-center mt-3 shadow-lg\">\n                        <h4 className='card-header' style={{fontFamily: 'Poppins'}}>attempt {header}</h4>\n                         <div className=\"card-body\">\n\n                         {attempt.switch1Answers ? (<p className='card-text'>Switch 1</p>) : (null) }\n                            {attempt.switch1Answers ? (\n                                attempt.switch1Answers.map((answer, index) => (\n                                    <button className='box-shadow--2dp' key={index} type='button' className={`btn mt-1 ${activeButtonSW1 === index ? \"btn-success\" : \"btn-primary\" }`} onClick={(event) => {setActiveButtonSW1(index); computeSW1Answer(event, index, attempt.id)}}>{answer}</button>\n                                ))) : (null)}\n\n\n                            {attempt.switch2Answers ? (<p className='card-text'>Switch 2</p>) : (null) }\n                            {attempt.switch2Answers ? (\n                                attempt.switch2Answers.map((answer, index) => (\n                                    <button className='box-shadow--2dp' key={index} type='button' className={`btn mt-1 ${activeButtonSW2 === index ? \"btn-success\" : \"btn-primary\"}`} onClick={(event) => {setActiveButtonSW2(index); computeSW2Answer(event, index, attempt.id)}}>{answer}</button>\n                                ))) : (null)}\n\n                            {attempt.switch3Answers ? (<p className='card-text'>Switch 3</p>) : (null) }\n                            {attempt.switch3Answers ? (\n                                attempt.switch3Answers.map((answer, index) => (\n                                    <button key={index} type='button' className={`btn mt-1 ${activeButtonSW3 === index ? \"btn-success\" : \"btn-primary\"}`} onClick={(event) => {setActiveButtonSW3(index); computeSW3Answer(event, index, attempt.id)}}>{answer}</button>\n                                ))) : (null)}\n\n                            {attempt.switch4Answers ? (<p className='card-text'>Switch 4</p>) : (null) }\n                            {attempt.switch4Answers ? (\n                                attempt.switch4Answers.map((answer, index) => (\n                                    <button key={index} type='button' className={`btn mt-1 ${activeButtonSW4 === index ? \"btn-success\" : \"btn-primary\"}`} onClick={(event) => {setActiveButtonSW4(index); computeSW4Answer(event, index, attempt.id)}}>{answer}</button>\n                                ))) : (null)}\n\n\n                            <div className='row mt-3'>\n                                <div className='col-sm d-flex prompting-select'>\n                                <select class=\"form-select w-auto\" aria-label=\"Default select example\" onChange={(event) => computePrompting(event, attempt.id)}>\n                                    <option selected>Prompting</option>\n                                    <option value=\"No prompt\">No prompt</option>\n                                    <option value=\"Visual prompt\">Visual prompt</option>\n                                    <option value=\"Verbal prompt\">Verbal prompt</option>\n                                    <option value=\"Physical prompt\">Physical prompt</option>\n                                </select>\n                                </div>\n                               \n                                <div className='col-sm d-flex engage-select'>\n                                <select class=\"form-select w-auto\" aria-label=\"Default select example\" onChange={(event) => computeEngagement(event, attempt.id)}>\n                                    <option selected>Engagement</option>\n                                    <option value=\"Engaged\">Engaged</option>\n                                    <option value=\"Somewhat engaged\">Somewhat engaged</option>\n                                    <option value=\"Not engaged\">Not engaged</option>\n                                </select>\n                                </div>\n\n                            </div>\n\n                   \n                         </div>\n                    </div>\n\n                     </div>\n\n                </div>\n\n            </div>\n       \n    )\n}\n\n\nconst EndActivity = ({ CalculateActivityScore, resultsArray, ComputePrompt, ComputeEngage, handleEndActivity, time, handleCommentChange, exportData, PromptEngage, resultsRef, handleScroll }) => {\n\n    const [showResults, setShowResults] = useState(false)\n\n\n    return(\n\n        <div className='container'>\n            <div className='row mt-5 mb-5'>\n                <div className='col d-flex col-lg-12 col-md-12 justify-content-center'>\n                    <button className='generate-button' type='button' onClick={() => {CalculateActivityScore(); setShowResults(true); handleEndActivity(); ComputePrompt(); ComputeEngage(); PromptEngage(); handleScroll(); }}>End activity</button>\n                </div>\n\n            </div>\n\n            {showResults ? (<div className='row'>\n                    <div className='col d-flex justify-content-center'>\n                    <div className=\"card text-center w-75 mb-4 shadow\">\n                        <h4 ref={resultsRef} id='resultDiv'  className='card-header'>Activity Results</h4>\n                         <div className=\"card-body\">\n                            <div className='row'>\n                                <div className='col-sm d-flex justify-content-center score-box'>\n                                <section>\n                                {resultsArray.length > 0 ? (\n                                 resultsArray.map((result, index) => (\n                                     <div key={index}>\n                                        <h2>Total score: {result.score}%</h2>\n                                        <h5>Switch 1 accuracy: {result.Switch1Accuracy}%</h5>\n                                        {typeof resultsArray[0][\"Switch2Accuracy\"] !== 'undefined' ? (\n                                        <h5>Switch 2 accuracy: {result.Switch2Accuracy}%</h5>) : (null)}\n                                        {typeof resultsArray[0][\"Switch3Accuracy\"] !== 'undefined' ? (\n                                        <h5>Switch 3 accuracy: {result.Switch3Accuracy}%</h5>) : (null)}\n                                         {typeof resultsArray[0][\"Switch4Accuracy\"] !== 'undefined' ? (\n                                        <h5>Switch 4 accuracy: {result.Switch4Accuracy}%</h5>) : (null)}\n                                        \n                                    </div>\n                                    ))): (null)}\n                                </section>\n                                </div>\n                           \n                                   \n                                 <div className='col-sm mt-1 d-flex time-box'>\n                                   <section>\n                                   <h5 className='mb-2'>Activity time <small>(mm:ss)</small></h5>\n                                  <Timer time={time} />\n                                   <h5 className='mt-4'>No attempt rate</h5>\n\n                                   {resultsArray.length > 0 ? (\n                                 resultsArray.map((result, index) => (\n                                     <div key={index}>\n                                        <h6>Switch 1: {result.Switch1NoAttempt}%</h6>\n                                        {typeof resultsArray[0][\"Switch2Accuracy\"] !== 'undefined' ? (\n                                        <h6>Switch 2: {result.Switch2NoAttempt}%</h6>) : (null)}\n                                        {typeof resultsArray[0][\"Switch3Accuracy\"] !== 'undefined' ? (\n                                        <h6>Switch 3: {result.Switch3NoAttempt}%</h6>) : (null)}\n                                         {typeof resultsArray[0][\"Switch4Accuracy\"] !== 'undefined' ? (\n                                        <h6>Switch 4: {result.Switch4NoAttempt}%</h6>) : (null)}\n                                        \n                                    </div>\n                                    ))): (null)}\n\n                                   </section>\n                                 </div>\n                                 \n                            </div>\n                      \n\n                                <div className='row mt-4'>\n                                    <div className='col-sm d-flex justify-content-center prompting-box'>\n                                        <PromptPie ComputePrompt={ComputePrompt} />\n                                    </div>\n                                    <div className='col-sm d-flex justify-content-center engagement-box'>\n                                        <EngagePie ComputeEngage={ComputeEngage} />\n                                    </div>\n\n\n                                </div>\n\n                                <div className='row'>\n                                    <div className='col d-flex justify-content-center'>\n                                    \n                                    <form>\n                                    <div className=\"mb-3 text-area\">\n                                        <label for=\"exampleInputEmail1\" class=\"form-label\">Activity comments</label>\n                                        <input type=\"textarea\" class=\"form-control\" onChange={handleCommentChange} placeholder='Add comments...' id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\n                                    </div>\n                                        \n                                    </form>\n                                  \n                                    </div>\n\n                                </div>\n\n                                <div className='row'>\n                                    <div className='col d-flex mt-2 justify-content-center'>\n                                    \n                                    <ExcelExport exportData={exportData} />\n                                  \n                                    </div>\n\n                                </div>\n                                <div className='row mt-3'>\n                                    <div className='col d-flex justify-content-center'>\n                                        <small style={{color: 'lightgray'}}>(reload page to reset activity)</small>\n                                    </div>\n\n                                </div>\n\n                                <div className='row'>\n                                <div className='col-sm d-flex mb-1 mt-2 justify-content-center'>\n                                    <h6 style={{color: '#9ba6a5', fontFamily: \"Poppins\"}}>Please provide your feedback via our <a href='#'>short survey</a>. Your comments are appreciated!</h6>\n                                </div>\n                                </div>\n\n                      \n                   \n                         </div>\n                    </div>\n\n                     </div>\n\n            </div>) : (null)}\n\n        </div>\n\n\n\n\n    );\n\n}\n\n//Pie Chart Prompting\n\nconst PromptPie = ({ ComputePrompt }) => {\n\n\n    return(\n        <div className='prompt-pie'>\n           \n            <VictoryPie data={ComputePrompt()} \n                innerRadius={35} \n                labels={( {datum} ) => `${datum.x} \\n ${datum.y}%`} \n                labelRadius={({ innerRadius }) => innerRadius + 40 }\n                style={{ labels: { fontSize: 8, fill: \"black\"}}}\n                colorScale={[\"#FF6961\", \"#77DD77\", \"#6CA0DC\", \"#FFF44C\"]}\n                style={{ labels: { fontSize: 14, fill: \"black\", fontWeight: \"bold\"}}}\n                \n                />\n           \n        </div>\n\n    );\n}\n\n//Pie Chart Engagement\n\nconst EngagePie = ({ ComputeEngage }) => {\n    return(\n        <div className='prompt-pie'>\n           \n            <VictoryPie data={ComputeEngage()} \n                innerRadius={35} \n                labels={( {datum} ) => `${datum.x} \\n ${datum.y}%`} \n                labelRadius={({ innerRadius }) => innerRadius + 39 }\n                style={{ labels: { fontSize: 8, fill: \"black\"}}}\n                colorScale={[\"#EC6B56\", \"#FFC154\", \"#47B39C\"]}\n                style={{ labels: { fontSize: 14, fill: \"black\", fontWeight: \"bold\"}}}\n                \n                />\n           \n        </div>\n\n    );\n}\n\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/Switch Stream PNG uncropped.dced3a7e.png\";","import React from 'react'\nimport logo from '../../images/Switch Stream PNG uncropped.png'\n\n\nconst Directions = () => {\n    return (\n        <div className='directions-page'>\n            <div className='container'>\n                <div className='row mt-5 mb-4'>\n                    <div className='col-sm d-flex justify-content-center'>\n                    <img src={logo} className=\"img-fluid mt-2\" width=\"25%\" height=\"auto\" alt=\"company-logo\" /> \n                    </div>\n                </div>\n            \n                <div className='row'>\n                    <div className='col d-flex justify-content-center'>\n                    <div className=\"card border-primary w-75  text-center mt-1 mb-3 shadow-lg directions-card\">\n                        <h4 className='card-header card-bg'>Switch Activity Directions</h4>\n                         <div className=\"card-body card-bg\">\n                         <p className=\"card-text\">1.\tDetermine the number of switches (up to 4) and number of attempts. Select “Create activity” <br />\n                                                  2.\tWhen ready to start activity, select “start time” <br />\n                                                  3.\tFor each attempt, you determine what a correct or incorrect activation looks like. If there is no attempt made, you can select “no attempt” to track that as well.<br />\n                                                  4.\tOptionally track prompting and engagement levels using the dropdown boxes.<br />\n                                                  5.\tAfter clicking “End activity”:<br /> \n                                                           <p> •\t<strong>For a single switch activity: </strong>  Total score = total correct attempts / total attempts<br /> </p>\n                                                           <p> •\t<strong>For a multi-switch activity:</strong>  An attempt is “Correct” only if ALL SWITCHES are marked CORRECT. Otherwise, if any switch is marked incorrect or no attempt, that attempt is considered wrong. Total score = total correct attempts / total attempts.<br /></p>\n                                                  6.\tAdd your activity comments, observations, etc.<br />\n                                                  7.\tDownload the results to Excel to save or share the progress of your client / student.<br />\n</p>\n\n\n                         </div>\n\n                    </div>\n\n                     </div>\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Directions\n","import React from 'react'\nimport QuickActivity from '../pages/quickActivity/QuickActivity';\nimport Directions from '../pages/home/Directions';\nimport {\n\tHashRouter as Router,\n\tRoutes,\n\tRoute,\n\tLink\n  } from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n\n\t\t<Router basename=\"/\">\n\n\n        <nav className='navbar navbar-expand-lg navbar-dark menu shadow fixed-top'>\n\t\t\t<div className='container'>\n\t\t\t<button class='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav' aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Target navigation\">\n\t\t\t\t<span class='navbar-toggler-icon'></span>\n\t\t\t</button>\n            <div className='collapse navbar-collapse justify-content-center' id='navbarNav'>\n            <ul class='navbar-nav'>\n\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t<Link to=\"/\">Switch Activity</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t<Link to=\"/directions\">Directions</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\n\t\t\t\t</ul>\n            </div>\n            </div>\n        </nav>\n\n\n\t\t<Routes>\n      <Route exact path=\"/directions\" element={<Directions />} />\n      <Route path=\"/\" element={<QuickActivity />} />\n     \n  \t\t</Routes>\n\n\n\t\t</Router>\n\n\n\n\n\n    );\n}\n\nexport default Navbar\n","import Navbar from \"./Components/navbar\";\nimport QuickActivity from \"./pages/quickActivity/QuickActivity\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../src/scss/style.scss';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}